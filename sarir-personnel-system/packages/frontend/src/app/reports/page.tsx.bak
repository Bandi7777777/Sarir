"use client";

import { useState, useMemo } from "react";
import Sidebar from "@/components/ui/Sidebar";
import { motion } from "framer-motion";
import { toast } from "react-hot-toast";
import dynamic from "next/dynamic";
import jsPDF from "jspdf";
import "jspdf-autotable";
import * as XLSX from "xlsx";

const LineChart = dynamic(() => import("recharts").then(mod => mod.LineChart), { ssr: false });
const Line = dynamic(() => import("recharts").then(mod => mod.Line), { ssr: false });
const XAxis = dynamic(() => import("recharts").then(mod => mod.XAxis), { ssr: false });
const YAxis = dynamic(() => import("recharts").then(mod => mod.YAxis), { ssr: false });
const CartesianGrid = dynamic(() => import("recharts").then(mod => mod.CartesianGrid), { ssr: false });
const Tooltip = dynamic(() => import("recharts").then(mod => mod.Tooltip), { ssr: false });
const Legend = dynamic(() => import("recharts").then(mod => mod.Legend), { ssr: false });

/* ─────────────── Theme helpers ─────────────── */
const GLASS = "backdrop-blur-xl border border-white/10 rounded-3xl shadow-[0_15px_40px_rgba(0,0,0,.3)] glow-border";
const PANELBG = "bg-white/10 dark:bg-white/10";

/* ─────────────── Animations ─────────────── */
const rise = { hidden: { y: 20, opacity: 0 }, show: { y: 0, opacity: 1, transition: { type: "spring", stiffness: 100, damping: 15 } } };
const stagger = { hidden: { opacity: 0 }, show: { opacity: 1, transition: { staggerChildren: 0.1, delayChildren: 0.2 } } };

interface ReportData {
  category: string;
  count: number;
}
interface TrendData {
  month: string;
  count: number;
}

const reportData: ReportData[] = [
  { category: "داخلی", count: 50 },
  { category: "قراردادها", count: 30 },
  { category: "اطلاعات پرسنلی", count: 45 },
  { category: "اطلاعات آدرس و تماس", count: 40 },
  { category: "اطلاعات بانکی", count: 35 },
  { category: "پزشکی", count: 25 },
];

const trendData: TrendData[] = [
  { month: "فروردین", count: 20 },
  { month: "اردیبهشت", count: 30 },
  { month: "خرداد", count: 25 },
  { month: "تیر", count: 40 },
  { month: "مرداد", count: 35 },
  { month: "شهریور", count: 50 },
];

export default function ReportsPage() {
  const [expanded, setExpanded] = useState(false); // تغییر: اضافه useState برای expanded
  const [data] = useState<ReportData[]>(reportData);

  const downloadPDF = () => {
    const doc = new jsPDF();
    doc.text("گزارش پرسنلی", 105, 10, { align: "center" });
    const tableData = data.map((item) => [item.count, item.category]);
    (doc as any).autoTable({
      head: [["تعداد", "دسته‌بندی"]],
      body: tableData,
    });
    doc.save("reports.pdf");
    toast.success("PDF دانلود شد!");
  };

  const downloadExcel = () => {
    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "گزارش‌ها");
    XLSX.writeFile(workbook, "reports.xlsx");
    toast.success("Excel دانلود شد!");
  };

  const metrics = useMemo(() => [ // تغییر: metricها
    { title: "تعداد گزارش‌ها", value: data.length.toString(), iconColor: "#07657E" },
  ], [data]);

  return (
    <div className="theme-light flex min-h-screen bg-gradient-to-br from-[#EAF6F9] to-[#A3D8F4] dark:from-gray-900 dark:to-gray-800 text-gray-900 dark:text-white animate-gradient-bg">
      <Sidebar expanded={expanded} setExpanded={setExpanded} />
      <div className="flex-1 p-4 md:p-8 space-y-8 transition-all duration-300">
        <motion.header
          initial={{ y: -50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="sticky top-0 z-40 bg-white/90 dark:bg-gray-800/90 backdrop-blur-lg p-6 rounded-b-xl shadow-xl"
        >
          <h1 className="text-4xl md:text-5xl font-bold text-[#07657E] dark:text-[#66B2FF] animate-neon-text">
            گزارش‌ها
          </h1>
        </motion.header>

        {/* Hero Stats */}
        <motion.section
          initial="hidden"
          whileInView="show"
          viewport={{ once: true }}
          variants={stagger}
          className={`${GLASS} ${PANELBG} p-6`}
        >
          <motion.div variants={rise} className="grid sm:grid-cols-2 gap-4">
            {metrics.map((m, i) => (
              <motion.div key={i} whileHover={{ scale: 1.05 }} className={`${GLASS2} p-4`}>
                <h3 className="text-sm font-semibold">{m.title}</h3>
                <p className="text-xs opacity-85">{m.value}</p>
              </motion.div>
            ))}
          </motion.div>
        </motion.section>

        {/* Controls */}
        <motion.div
          initial="hidden"
          whileInView="show"
          viewport={{ once: true }}
          variants={stagger}
          className="flex flex-wrap gap-4"
        >
          <Button
            onClick={downloadPDF}
            className="bg-gradient-to-r from-turquoise-400 to-orange-500 text-white shadow-lg hover:shadow-xl transition-all duration-300"
          >
            دانلود PDF
          </Button>
          <Button
            onClick={downloadExcel}
            className="bg-gradient-to-r from-turquoise-400 to-orange-500 text-white shadow-lg hover:shadow-xl transition-all duration-300"
          >
            دانلود Excel
          </Button>
        </motion.div>

        {/* Table */}
        <motion.div
          initial="hidden"
          whileInView="show"
          viewport={{ once: true }}
          variants={stagger}
          className="bg-white/80 backdrop-blur-md rounded-lg shadow-md overflow-x-auto mb-8"
        >
          <table className="w-full text-sm text-gray-800 table-auto">
            <thead>
              <tr className="border-b">
                <th className="py-3 px-4 text-right">دسته‌بندی</th>
                <th className="py-3 px-4 text-right">تعداد</th>
              </tr>
            </thead>
            <tbody>
              {data.map((item) => (
                <motion.tr
                  key={item.category}
                  whileHover={{ backgroundColor: "#F0FAFB" }}
                  className="border-b hover:bg-gray-50"
                >
                  <td className="py-3 px-4 text-right">{item.category}</td>
                  <td className="py-3 px-4 text-right">{item.count}</td>
                </motion.tr>
              ))}
            </tbody>
          </table>
        </motion.div>

        {/* Chart */}
        <motion.div
          initial="hidden"
          whileInView="show"
          viewport={{ once: true }}
          variants={stagger}
          className={`${GLASS} ${PANELBG} p-6`}
        >
          <h2 className="text-lg font-semibold mb-4 text-[#07657E]">روند تغییرات ماهانه</h2>
          <div className="flex justify-center">
            <LineChart width={600} height={300} data={trendData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="month" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line type="monotone" dataKey="count" stroke="#4DA8FF" activeDot={{ r: 7 }} />
            </LineChart>
          </div>
        </motion.div>
      </div>
    </div>
  );
}